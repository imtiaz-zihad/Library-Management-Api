import { Rule } from "eslint";
import * as ESTree$1 from "estree";
import * as ESTree from "estree";

//#region src/removeArrayElement.d.ts
type ArrayElement = ESTree$1.Expression | ESTree$1.SpreadElement;
type ArrayElementsOrParent = ESTree$1.ArrayExpression | ESTree$1.ArrayExpression["elements"];
/**
* Given an ArrayExpression or the list of elements an ArrayExpression has,
* the index or node within that array that you want to remove, and a rule fixer,
* this function yields removals for the node itself, as well as any trailing
* commas that are no longer necessary.
* @param context ESLint Rule Context
* @param fixer Rule fixer
* @param elementOrIndex The child expression, spread element, or a numeric
* index of the child
* @param parentOrElements The array expression node, or its `.elements` array
* @yields fixer removals for the node itself, as well as any trailing commas
* that are no longer necessary.
*/
declare function removeArrayElement(context: Rule.RuleContext, fixer: Rule.RuleFixer, elementOrIndex: ArrayElement | number, parentOrElements: ArrayElementsOrParent): Generator<Rule.Fix, void>;
//#endregion
//#region src/fixRemoveArrayElement.d.ts
/**
* Given an ArrayExpression or the list of elements an ArrayExpression has, and
* the index or node within that array that you want to remove, this function
* returns a fixer function that you can provide to a report descriptor that
* will remove that node along with any trailing comma.
* @param context ESLint Rule Context
* @param elementOrIndex The child expression, spread element, or a numeric
* index of the child
* @param parentOrElements The array expression node, or its `.elements` array
* @returns a fixer function that you can provide to a report descriptor, that
* removes an element from an array expression, along with any commas that are
* no longer necessary.
*/
declare const fixRemoveArrayElement: (context: Rule.RuleContext, elementOrIndex: ArrayElement | number, parentOrElements: ArrayElementsOrParent) => ((fixer: Rule.RuleFixer) => Generator<Rule.Fix, void>);
//#endregion
//#region src/removeObjectProperty.d.ts
type ObjectProperty = ESTree.Property | ESTree.SpreadElement;
/**
* Given an ObjectProperty, and a rule fixer, this function yields removals for
* the node itself, as well as any trailing commas that are no longer necessary.
* @param context ESLint Rule Context
* @param fixer Rule fixer
* @param property The property node
* @yields fixer removals for the node itself, as well as any trailing commas
* that are no longer necessary.
*/
declare function removeObjectProperty(context: Rule.RuleContext, fixer: Rule.RuleFixer, property: ObjectProperty): Generator<Rule.Fix, void>;
//#endregion
//#region src/fixRemoveObjectProperty.d.ts
/**
* Given an ObjectProperty, this function returns a fixer function that you can
* provide to a report descriptor that will remove that node along with any
* trailing comma.
* @param context ESLint Rule Context
* @param property The property node
* @returns a fixer function that you can provide to a report descriptor, that
* removes a property from an object expression, along with any commas that
* are no longer necessary.
*/
declare const fixRemoveObjectProperty: (context: Rule.RuleContext, property: ObjectProperty) => ((fixer: Rule.RuleFixer) => Generator<Rule.Fix, void>);
//#endregion
export { ArrayElement, ArrayElementsOrParent, ObjectProperty, fixRemoveArrayElement, fixRemoveObjectProperty, removeArrayElement, removeObjectProperty };