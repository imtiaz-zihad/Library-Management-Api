//#region src/removeArrayElement.ts
/**
* Given an ArrayExpression or the list of elements an ArrayExpression has,
* the index or node within that array that you want to remove, and a rule fixer,
* this function yields removals for the node itself, as well as any trailing
* commas that are no longer necessary.
* @param context ESLint Rule Context
* @param fixer Rule fixer
* @param elementOrIndex The child expression, spread element, or a numeric
* index of the child
* @param parentOrElements The array expression node, or its `.elements` array
* @yields fixer removals for the node itself, as well as any trailing commas
* that are no longer necessary.
*/
function* removeArrayElement(context, fixer, elementOrIndex, parentOrElements) {
	const elements = Array.isArray(parentOrElements) ? parentOrElements : parentOrElements.elements;
	const [element, index] = getElementAndIndex(elements, elementOrIndex);
	if (!element) throw new Error("Cannot remove a null (blank) array element.");
	const tokenAfter = context.sourceCode.getTokenAfter(element);
	const tokenBefore = context.sourceCode.getTokenBefore(element);
	if (index > 0 && tokenAfter?.value !== "," && tokenBefore?.value === ",") yield fixer.remove(tokenBefore);
	yield fixer.remove(element);
	if (tokenAfter?.value === ",") yield fixer.remove(tokenAfter);
}
function getElementAndIndex(elements, elementOrIndex) {
	if (typeof elementOrIndex === "number") return [elements[elementOrIndex], elementOrIndex];
	const index = elements.indexOf(elementOrIndex);
	if (index === -1) throw new Error("Node is not a child of the parent array.");
	return [elements[index], index];
}

//#endregion
//#region src/fixRemoveArrayElement.ts
/**
* Given an ArrayExpression or the list of elements an ArrayExpression has, and
* the index or node within that array that you want to remove, this function
* returns a fixer function that you can provide to a report descriptor that
* will remove that node along with any trailing comma.
* @param context ESLint Rule Context
* @param elementOrIndex The child expression, spread element, or a numeric
* index of the child
* @param parentOrElements The array expression node, or its `.elements` array
* @returns a fixer function that you can provide to a report descriptor, that
* removes an element from an array expression, along with any commas that are
* no longer necessary.
*/
const fixRemoveArrayElement = (context, elementOrIndex, parentOrElements) => {
	return (fixer) => removeArrayElement(context, fixer, elementOrIndex, parentOrElements);
};

//#endregion
//#region src/removeObjectProperty.ts
/**
* Given an ObjectProperty, and a rule fixer, this function yields removals for
* the node itself, as well as any trailing commas that are no longer necessary.
* @param context ESLint Rule Context
* @param fixer Rule fixer
* @param property The property node
* @yields fixer removals for the node itself, as well as any trailing commas
* that are no longer necessary.
*/
function* removeObjectProperty(context, fixer, property) {
	const tokenAfter = context.sourceCode.getTokenAfter(property);
	const tokenBefore = context.sourceCode.getTokenBefore(property);
	if (tokenAfter?.value !== "," && tokenBefore?.value === ",") yield fixer.remove(tokenBefore);
	yield fixer.remove(property);
	if (tokenAfter?.value === ",") yield fixer.remove(tokenAfter);
}

//#endregion
//#region src/fixRemoveObjectProperty.ts
/**
* Given an ObjectProperty, this function returns a fixer function that you can
* provide to a report descriptor that will remove that node along with any
* trailing comma.
* @param context ESLint Rule Context
* @param property The property node
* @returns a fixer function that you can provide to a report descriptor, that
* removes a property from an object expression, along with any commas that
* are no longer necessary.
*/
const fixRemoveObjectProperty = (context, property) => {
	return (fixer) => removeObjectProperty(context, fixer, property);
};

//#endregion
export { fixRemoveArrayElement, fixRemoveObjectProperty, removeArrayElement, removeObjectProperty };