import path from "path";
import { createRule } from "../createRule.js";
const fileRegex = /^file:/;
const linkRegex = /^link:/;
const rule = createRule({
  create(context) {
    return {
      "Program:exit"() {
        const original = JSON.parse(context.sourceCode.text);
        const { dependencies, devDependencies, peerDependencies } = original;
        const depObjs = [
          Object.entries(dependencies ?? {}),
          Object.entries(peerDependencies ?? {}),
          Object.entries(devDependencies ?? {})
        ];
        for (const obj of depObjs) {
          for (const [key, value] of obj) {
            const response = (pathToken) => {
              const filePath = path.join(
                context.filename.replace("package.json", ""),
                value.replace(pathToken, "")
              );
              try {
                require.resolve(filePath);
              } catch {
                context.report({
                  data: {
                    package: key,
                    path: value
                  },
                  messageId: "invalidPath",
                  node: context.sourceCode.ast
                });
              }
            };
            if (value.startsWith("link:")) {
              response(linkRegex);
            }
            if (value.startsWith("file:")) {
              response(fileRegex);
            }
          }
        }
      }
    };
  },
  meta: {
    deprecated: true,
    docs: {
      category: "Best Practices",
      description: "Checks existence of local dependencies in the package.json"
    },
    messages: {
      invalidPath: "The package {{package}} does not exist given the specified path: {{path}}."
    },
    schema: [],
    type: "problem"
  }
});
export {
  rule
};
