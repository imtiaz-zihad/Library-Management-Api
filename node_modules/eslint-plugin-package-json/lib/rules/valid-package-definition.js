import { validate } from "package-json-validator";
import { createRule } from "../createRule.js";
const ignoredErrors = [
  /^Url not valid/i,
  /^Invalid version range for .+?: file:/i,
  /^author field should have name/i
];
const isUsableError = (errorText) => ignoredErrors.every((pattern) => !pattern.test(errorText));
const rule = createRule({
  create(context) {
    const ignoreProperties = context.options[0]?.ignoreProperties ?? [];
    return {
      "Program:exit"() {
        const validation = validate(context.sourceCode.text);
        const usableErrors = validation.errors?.filter((error) => {
          return isUsableError(error.message) && !ignoreProperties.includes(error.field);
        }) ?? [];
        for (const error of usableErrors) {
          if (error.message) {
            context.report({
              // eslint-disable-next-line eslint-plugin/prefer-message-ids
              message: error.message,
              node: context.sourceCode.ast
            });
          }
        }
      }
    };
  },
  // eslint-disable-next-line eslint-plugin/prefer-message-ids
  meta: {
    docs: {
      category: "Best Practices",
      description: "Enforce that package.json has all properties required by the npm spec",
      recommended: true
    },
    schema: [
      {
        additionalProperties: false,
        properties: {
          ignoreProperties: {
            items: {
              type: "string"
            },
            type: "array"
          }
        },
        type: "object"
      }
    ],
    type: "problem"
  }
});
export {
  rule
};
