type FieldSpec = FieldSpecWithType | FieldSpecWithTypes;
type People = Person | Person[] | string;
interface Person {
    email?: string;
    name: string;
    url?: string;
    web?: string;
}
type SpecMap = Record<string, FieldSpec>;
type SpecName = "commonjs_1.0" | "commonjs_1.1" | "npm";
type SpecType = "array" | "boolean" | "object" | "string";
type UrlOrMailTo = string | {
    email: string;
    mail?: never;
    url?: string;
    web?: never;
} | {
    email?: never;
    mail: string;
    url?: never;
    web?: string;
} | {
    email?: never;
    mail?: string;
    url?: never;
    web: string;
} | {
    email?: string;
    mail?: never;
    url: string;
    web?: never;
};
interface UrlType {
    type: string;
    url: string;
}
interface BaseFieldSpec {
    format?: RegExp;
    or?: string;
    recommended?: boolean;
    required?: boolean;
    validate?: (name: string, obj: any) => string[];
    warning?: boolean;
}
type FieldSpecWithType = BaseFieldSpec & {
    type?: SpecType;
    types?: never;
};
type FieldSpecWithTypes = BaseFieldSpec & {
    type?: never;
    types?: SpecType[];
};

export type { FieldSpec, People, Person, SpecMap, SpecName, SpecType, UrlOrMailTo, UrlType };
