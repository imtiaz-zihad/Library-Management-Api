import { packageFormat, urlFormat } from "../formats.js";
const isValidVersionRange = (v) => {
  return /^[\^<>=~]{0,2}[0-9.x]+/.test(v) || urlFormat.test(v) || v == "*" || v === "" || v === "latest" || typeof v === "string" && v.startsWith("git") || // https://pnpm.io/next/workspaces#workspace-protocol-workspace
  /^workspace:((\^|~)?[0-9.x]*|(<=?|>=?)?[0-9.x][\-.+\w]+|\*)?$/.test(v) || // https://pnpm.io/next/catalogs
  typeof v === "string" && v.startsWith("catalog:") || typeof v === "string" && v.startsWith("npm:") || // https://jsr.io/docs/using-packages
  typeof v === "string" && v.startsWith("jsr:") || false;
};
const validateDependencies = (name, deps) => {
  const errors = [];
  for (const pkg in deps) {
    if (!packageFormat.test(pkg)) {
      errors.push(`Invalid dependency package name: ${pkg}`);
    }
    if (!isValidVersionRange(deps[pkg])) {
      errors.push(`Invalid version range for dependency ${pkg}: ${deps[pkg]}`);
    }
  }
  return errors;
};
export {
  validateDependencies
};
