import { emailFormat, urlFormat } from "../formats.js";
const isPersonArray = (obj) => {
  return Array.isArray(obj) && obj.every((item) => isPerson(item));
};
const isPerson = (obj) => {
  return typeof obj === "object" && obj !== null && "name" in obj;
};
const validatePeople = (name, obj) => {
  const errors = [];
  function validatePerson(obj2) {
    if (typeof obj2 == "string") {
      const authorRegex = /^([^<(\s][^<(]*)?(\s*<(.*?)>)?(\s*\((.*?)\))?/;
      const authorFields = authorRegex.exec(obj2);
      if (authorFields) {
        const authorName = authorFields[1];
        const authorEmail = authorFields[3];
        const authorUrl = authorFields[5];
        validatePerson({
          email: authorEmail,
          name: authorName,
          url: authorUrl
        });
      } else {
        errors.push(`Unable to parse person string: ${obj2}`);
      }
    } else if (typeof obj2 == "object") {
      if (!obj2.name) {
        errors.push(`${name} field should have name`);
      }
      if (obj2.email && !emailFormat.test(obj2.email)) {
        errors.push(`Email not valid for ${name}: ${obj2.email}`);
      }
      if (obj2.url && !urlFormat.test(obj2.url)) {
        errors.push(`URL not valid for ${name}: ${obj2.url}`);
      }
      if (obj2.web && !urlFormat.test(obj2.web)) {
        errors.push(`URL not valid for ${name}: ${obj2.web}`);
      }
    } else {
      errors.push("People field must be an object or a string");
    }
  }
  if (obj instanceof Array) {
    for (let i = 0; i < obj.length; i++) {
      validatePerson(obj[i]);
    }
  } else {
    validatePerson(obj);
  }
  return errors;
};
export {
  isPerson,
  isPersonArray,
  validatePeople
};
